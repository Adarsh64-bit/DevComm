import React, { Component } from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import jwt_decode from 'jwt-decode';
import setAuthToken from './utils/setAuthToken';
import { logoutUser, setCurrentUser } from './actions/authActions';
import { clearCurrentProfile } from './actions/profileActions';

import { Provider } from 'react-redux';
import store from './store';

import PrivateRoute from './components/common/PrivateRoute';


import Navbar from './components/layout/Navbar';
import Footer from './components/layout/Footer';
import Landing from './components/layout/Landing';
import Register from './components/auth/Register';
import Login from './components/auth/Login';
import Dashboard from './components/dashboard/Dashboard';
import CreateProfile from './components/create-profile/CreateProfile';
import EditProfile from './components/edit-profile/EditProfile';
import AddExperience from './components/add-credentials/AddExperience';
import AddEducation from './components/add-credentials/AddEducation';
import Profiles from './components/profiles/Profiles';
import Profile from './components/profile/Profile';
import NotFound from './components/not-found/NotFound';



import './App.css';



// check for token
if(localStorage.jwtToken) {
  //set auth token heaeder auth
  setAuthToken(localStorage.jwtToken);
  // decode the token and get user info
  const decoded = jwt_decode(localStorage.jwtToken);
  // set user in isAuthenticated
  store.dispatch(setCurrentUser(decoded));

  //check for expired token
  const currentTime = Date.now() /1000;
  if(decoded.exp < currentTime) {
    // Logout user
    store.dispatch(logoutUser());
    // clear curremt profile
    store.dispatch(clearCurrentProfile());
    // Rediret to login
    window.location.href = '/login';
  }
}

// node moudles/react scripts/config/webpack config.js => line 314
// line 209: target: ['browserslist'], => target: "node",
/**
 * 
 * module.exports = {
    resolve: {
        fallback: { 
            crypto : require.resolve("crypto-browserify"),
            path: require.resolve("path-browserify"),
            stream: require.resolve("stream-browserify"),
            http: require.resolve("stream-http"),
        },
    },
}; 

IMPORTANT -- solved the cant resolve fs error by removing the import res 
in profile actions which is automatically generated by intellisense. FUCK it wasted me a day.
 * 
 */


class App extends Component {
  render() {
    return (
    <Provider store= { store }>
      <Router>
        
          <div className="App">
            <Navbar />
            <Route exact path="/" component= {Landing} />
            <div className="container">
              <Route exact path= "/register" component={Register} />
              <Route exact path= "/login" component={Login} />
              <Route exact path= "/profiles" component={Profiles} />
              <Route exact path= "/profile/:handle" component={Profile} />
              <Switch>
                <PrivateRoute exact path= "/dashboard" component={Dashboard} />
              </Switch>
              <Switch>
                <PrivateRoute 
                exact 
                path= "/create-profile" 
                component={CreateProfile} />
              </Switch>
              <Switch>
                <PrivateRoute 
                exact 
                path= "/edit-profile" 
                component={EditProfile} />
              </Switch>
              <Switch>
                <PrivateRoute 
                exact 
                path= "/add-experience" 
                component={AddExperience} />
              </Switch>
              <Switch>
                <PrivateRoute 
                exact 
                path= "/add-education" 
                component={AddEducation} />
              </Switch>
              <Route exact path= "/not-found" component={NotFound} />
            </div>
            <Footer />  
          </div>
        
      </Router>
    </Provider>
    );
  }
}


export default App;
